The active directory implementation given has a group with 2 list, a list of users and a list of subgroups. Now, when we search for a user, we search in the users list, if found, we return True, or else, we recurse in the subgroups until the user is found, or we exhaust the search space.


Time complexity - O(n). This function has a username and a group as input. The size of input is not going to vary, it will always be a string. But, if we assume the total number of users in the provided group to be "n", then the user can be a part of the group or any subgroup or not present in the group at all. Recursively it will take "n" checks.

Space complexity - O(1), as we don't have any variables to store the result of any computation. Just the temp vaiables in for loop